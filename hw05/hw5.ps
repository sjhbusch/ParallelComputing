%!PS-Adobe-3.0
%%Title: hw5.cu
%%For: Shawn
%%Creator: a2ps version 4.14
%%CreationDate: Sat Oct 17 21:31:23 2020
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/* Homework Assignment #5) c n
( * Simple CPU program to add two long vectors) N
( * and to calculate a 1D stencil) N
( * Author: Shawn Hinnebusch) N
( * Date: 10/19/2020) N
( *) N
( * Part 2 code is VECTORADD 1) N
( * Part 3-5 code is VECTORADD 0) N
() N
( * To compile locally: nvcc -O3 -o hw5.exe  hw5.cu -lm) N
() N
( * To compile on the CRC:) N
( * crc-interactive.py -g -u 1 -t 1 -p gtx1080) N
( * nvcc -O3 -gencode arch=compute_61,code=sm_61 -o hw5.exe  hw5.cu -lm) N
() N
( * To run:) N
( * ./hw5.exe <vector size>) N
( * ./hw5.exe 1e8) N
() N
( * Create PDF: ) N
( * a2ps hw5.cu --pro=color --columns=2 -E --pretty-print='c' -o hw5.ps | ps2pdf ) N
(hw5.ps) N
() N
( * Compress: tar czvf Hinnebusch_hw5.tar.gz hw05/) N
( */) N
() p n
(#include) K
( ") p
(timer_nv.h) str
(") p n
(#include) K
( <math.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <sys/resource.h>) p n
() N
(#define) K
( VECTORADD 0 ) p
(// else stencil) c n
() p n
(typedef) K
( ) p
(float) k
( REAL;) p n
(typedef) K
( ) p
(int) k
(   INT;) p n
(#define) K
( RADIUS 3) p n
(#define) K
( BLOCK_SIZE 256) p n
() N
(// ########################### Stencil 1D Functions ###########################) c n
(__global__ ) p
(void) k
( stencil_1d\() p
(const) K
( REAL *in, REAL *out, ) p
(const) K
( INT n\)) p n
({) N
(    __shared__ REAL temp[ BLOCK_SIZE + 2 * RADIUS ];) N
(    INT             gindex = threadIdx.x + blockIdx.x * blockDim.x;) N
(    INT             lindex = threadIdx.x + RADIUS;) N
() N
(    ) S
(// Read input elements into shared memory) c n
(    __syncthreads\( \);) p n
(    temp[ lindex ] = in[ gindex ];) N
(    ) S
(// Fills temp vector with previous value unless its the first block) c n
(    ) p
(if) K
( \(threadIdx.x < RADIUS && gindex > RADIUS\) {) p n
(        temp[ lindex - RADIUS ] = in[ gindex - RADIUS ];) N
(        ) S
(// Check to not exceed the largest block size before filling in) c n
(        ) p
(// the last 2 ghost cells) c n
(        ) p
(if) K
( \(gindex + BLOCK_SIZE < n\) { temp[ lindex + BLOCK_SIZE ] = in[ gindex ) p n
(+ BLOCK_SIZE ]; }) N
(    }) N
(    __syncthreads\( \);) N
() N
(    ) S
(// Apply the stencil) c n
(    REAL result = 0.0;) p n
(    ) S
(if) K
( \(gindex >= RADIUS && gindex < \(n - RADIUS\)\) {) p n
(        ) S
(for) K
( \() p
(int) k
( offset = -RADIUS; offset <= RADIUS; offset++\) {) p n
(            result += temp[ lindex + offset ];) N
(        }) N
(    }) N
() N
(    ) S
(// Store the result) c n
(    out[ gindex ] = result;) p n
(hw5.cu) (Page 1/3) (Oct 17, 20 21:30) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(}) p n
() N
(void) k
( stencil_1d_cpu\() p
(const) K
( REAL *in, REAL *out, ) p
(const) K
( INT n\)) p n
({) N
(    ) S
(for) K
( \() p
(int) k
( i = RADIUS; i < \(n - RADIUS\); i++\) {) p n
(        ) S
(for) K
( \() p
(int) k
( offset = -RADIUS; offset <= RADIUS; offset++\) {) p n
(            out[ i ] += in[ i + offset ];) N
(        }) N
(    }) N
(}) N
() N
(// ########################### 2 Vector Functions ###########################) c n
() p n
(__global__ ) S
(void) k
( vector_add_gpu\() p
(const) K
( INT n, ) p
(const) K
( REAL *a, ) p
(const) K
( REAL *b, REAL *) p n
(c\)) N
({) N
(    INT tid = blockIdx.x * blockDim.x + threadIdx.x;) N
() N
(    ) S
(if) K
( \(tid < n\) c[ tid ] = a[ tid ] + b[ tid ];) p n
(}) N
() N
(void) k
( vector_add_cpu\() p
(const) K
( INT n, ) p
(const) K
( REAL *a, ) p
(const) K
( REAL *b, REAL *c\)) p n
({) N
(    ) S
(for) K
( \() p
(int) k
( i = 0; i < n; i++\)) p n
(        c[ i ] = a[ i ] + b[ i ];) N
(}) N
() N
(// ########################### Main Function ###########################) c n
() p n
(int) k
( main\(INT argc, ) p
(char) k
( *argv[]\)) p n
({) N
(    ) S
(if) K
( \(argc < 2\) {) p n
(        perror\(") S
(Command-line usage: executableName <vector size>) str
("\);) p n
(        exit\(1\);) N
(    }) N
() N
(    ) S
(int) k
( n = atof\(argv[ 1 ]\);) p n
() N
(    printf\(") S
(N: %d\\n) str
(", n\);) p n
() N
(    ) S
(// Initialize and alloc memory for arrays) c n
(    REAL *x, *y;) p n
(    cudaMallocManaged\(&x, n * ) S
(sizeof) K
(\(*x\)\);) p n
(    cudaMallocManaged\(&y, n * ) S
(sizeof) K
(\(*y\)\);) p n
() N
(#if) K
( VECTORADD) p n
(    REAL *z;) N
(    cudaMallocManaged\(&z, n * ) S
(sizeof) K
(\(*z\)\);) p n
(    ) S
(// Init vectors for addition) c n
(    ) p
(for) K
( \() p
(int) k
( i = 0; i < n; i++\) {) p n
(        x[ i ] = 3.5;) N
(        y[ i ] = 1.5;) N
(    }) N
(#else) K
( ) p
(// stencil) c n
(    ) p
(// Init vectors for stencil) c n
(    ) p
(// note y is for the result should start at zero) c n
(    ) p
(for) K
( \() p
(int) k
( i = 0; i < n; i++\) {) p n
(        x[ i ] = 1.0;) N
(        y[ i ] = 0.0;) N
(    }) N
(#endif) K n
() p n
(    ) S
(// CPU Run) c n
(    StartTimer\( \);) p n
() N
(#if) K
( VECTORADD) p n
(    vector_add_cpu\(n, x, y, z\);) N
(#else) K
( ) p
(// stencil) c n
(    stencil_1d_cpu\(x, y, n\);) p n
(hw5.cu) (Page 2/3) (Oct 17, 20 21:30) title
border
grestore
(Printed by Shawn) rhead
(hw5.cu) (1/2) (Saturday October 17, 2020) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#endif) K n
() p n
(    ) S
(double) k
( cpu_elapsedTime = GetTimer\( \); ) p
(// elapsed time is in seconds) c n
() p n
(    ) S
(// GPU Run) c n
(    cudaEvent_t timeStart, timeStop;) p n
(    cudaEventCreate\(&timeStart\);) N
(    cudaEventCreate\(&timeStop\);) N
(    ) S
(float) k
( gpu_elapsedTime; ) p
(// type float, precision is milliseconds \(ms\) !!!) c n
() p n
(    ) S
(int) k
( nBlocks = \(n + BLOCK_SIZE - 1\) / BLOCK_SIZE;) p n
() N
(    cudaEventRecord\(timeStart, 0\); ) S
(// 2nd argument zero, cuda streams) c n
() p n
(#if) K
( VECTORADD) p n
(    vector_add_gpu< < < nBlocks, BLOCK_SIZE > > >\(n, x, y, z\);) N
(#else) K
( ) p
(// stencil) c n
(    stencil_1d< < < nBlocks, BLOCK_SIZE > > >\(x, y, n\);) p n
(#endif) K n
() p n
(    cudaDeviceSynchronize\( \);) N
() N
(    cudaEventRecord\(timeStop, 0\);) N
(    cudaEventSynchronize\(timeStop\);) N
() N
(    cudaEventElapsedTime\(&gpu_elapsedTime, timeStart, timeStop\);) N
() N
(    printf\(") S
(elapsed wall time \(CPU\) = %5.4f ms\\n) str
(", cpu_elapsedTime * 1000.\);) p n
(    printf\(") S
(elapsed wall time \(GPU\) = %5.4f ms\\n\\n) str
(", gpu_elapsedTime\);) p n
() N
(    cudaEventDestroy\(timeStart\);) N
(    cudaEventDestroy\(timeStop\);) N
() N
(    ) S
(// Used to print final results of CPU or GPU) c n
(    ) p
(// for \(int i = 0; i < n; i++\) {) c n
(    ) p
(//    printf\("%f\\n", y[i]\);) c n
(    ) p
(//}) c n
() p n
(    cudaFree\(x\);) N
(    cudaFree\(y\);) N
() N
(// Free additional vector for addition) c n
(#if) K
( VECTORADD) p n
(    cudaFree\(z\);) N
(#endif) K n
() p n
(    ) S
(return) K
( EXIT_SUCCESS;) p n
(}) N
(hw5.cu) (Page 3/3) (Oct 17, 20 21:30) title
border
grestore
(Printed by Shawn) rhead
(hw5.cu) (2/2) (Saturday October 17, 2020) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
