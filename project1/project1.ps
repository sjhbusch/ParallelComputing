%!PS-Adobe-3.0
%%Title: project1.cu
%%For: Shawn
%%Creator: a2ps version 4.14
%%CreationDate: Tue Oct 27 12:32:38 2020
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black Blue Green Red 
%%DocumentSuppliedResources: procset a2ps-color-prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  0 setgray
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.5 0.5 1 setrgbcolor
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    1 setgray
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def
%%BeginResource: procset a2ps-color-prolog 2.0 1

%% Definition of the color faces.
/p {
  0 0 0 FG
  false BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  0 0 0 FG
  false BG
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false BG
  false UL
  false BX
  0 0 0.9 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/K {
  false BG
  false UL
  false BX
  0 0 0.8 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier bfs scalefont setfont
  Show
} bind def

/C {
  false BG
  false UL
  false BX
  0.8 0 0 FG
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/l {
  0 0 0 FG
  0.8 0.8 0 true BG
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/L {
  0 0 0 FG
  1 1 0 true BG
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/str {
  false BG
  false UL
  false BX
  0 0.5 0 FG
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  1 0 0 true BG
  false UL
  true BX
  1 1 1 FG
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul 2 div neg 0 rmoveto
    f# setfont
    0.8 0.1 0.1 FG
    c-show
  grestore
} bind def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 6 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/* Project 1) c n
( * Finite Difference Solution of a Vibrating) N
( * 2D Membrane on a GPU) N
( * Author: Shawn Hinnebusch) N
( * Date: 10/30/2020) N
( *) N
() N
( * To compile locally: nvcc -O3 -o project1.exe  project1.cu -lm) N
() N
( * To compile on the CRC:) N
( * crc-interactive.py -g -u 1 -t 1 -p gtx1080) N
( * nvcc -O3 -arch=sm_61 -o project1.exe  project1.cu -lm) N
() N
( * To run:) N
( *) N
( * ./project1.exe) N
() N
( * Create PDF:) N
( * a2ps project1.cu --pro=color --columns=2 -E --pretty-print='c' -o project1.ps) N
( | ps2pdf project1.ps) N
() N
( * Compress: tar czvf Hinnebusch_proj1.tar.gz project1/) N
( */) N
() p n
(#include) K
( ") p
(timer_nv.h) str
(") p n
(#include) K
( <) p
(float) k
(.h>) p n
(#include) K
( <limits.h>) p n
(#include) K
( <math.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <sys/resource.h>) p n
() N
(#define) K
( BLOCK_SIZE_X 16) p n
(#define) K
( BLOCK_SIZE_Y 16) p n
(#define) K
( MACHINE_PRECISION 1e-10) p n
(#define) K
( LOOP_MAX 2000) p n
(#ifndef) K
( TIME) p n
(#define) K
( TIME 2.0) p n
(#endif) K n
(#ifndef) S
( LX) p n
(#define) K
( LX 0.50) p n
(#endif) K n
(#define) S
( PI M_PI) p n
() N
(typedef) K
( ) p
(float) k
( REAL;) p n
(typedef) K
( ) p
(int) k
(   INT;) p n
() N
(void) k
( surfaceOutput\() p
(const) K
( INT nx, ) p
(const) K
( INT ny, ) p
(const) K
( REAL *x\)) p n
({) N
(    INT   i, j, ic;) N
(    ) S
(FILE) k
( *output;) p n
(    output = fopen\(") S
(SurfaceOutput.dat) str
(", ") p
(w) str
("\);) p n
() N
(    ) S
(for) K
( \(j = 0; j < ny; j++\) {) p n
(        ) S
(for) K
( \(i = 0; i < nx; i++\) {) p n
(            ic = j * nx + i;) N
(            fprintf\(output, ") S
(%f) str
(", x[ ic ]\);) p n
(            ) S
(if) K
( \(i < \(nx - 1\)\) { fprintf\(output, ") p
( ) str
("\); }) p n
(        }) N
(        fprintf\(output, ") S
(\\n) str
("\);) p n
(    }) N
(    fclose\(output\);) N
(}) N
() N
(void) k
( compareOutput\() p
(const) K
( INT nx, ) p
(const) K
( INT ny, ) p
(const) K
( REAL *analyticSol, ) p
(const) K
( RE) p n
(AL *cpu, ) S
(const) K
( REAL *gpu, ) p
(const) K
( REAL dx,) p n
(                   ) S
(const) K
( INT i\)) p n
({) N
(project1.cu) (Page 1/6) (Oct 27, 20 12:32) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    INT  j, ic;) p n
(    REAL x = i * dx;) N
() N
(    ) S
(char) k
( fileName[ 50 ] = ") p
(results_time=) str
(";) p n
(    ) S
(char) k
( timeChar[ 64 ];) p n
(    sprintf\(timeChar, ") S
(%.2f) str
(", TIME\);) p n
(    strcat\(fileName, timeChar\);) N
() N
(    strcat\(fileName, ") S
(_x=) str
("\);) p n
() N
(    ) S
(char) k
( xValue[ 64 ];) p n
(    sprintf\(xValue, ") S
(%.2f) str
(", x\);) p n
(    strcat\(fileName, xValue\);) N
(    strcat\(fileName, ") S
(.dat) str
("\);) p n
() N
(    ) S
(FILE) k
( *output;) p n
(    output = fopen\(fileName, ") S
(w) str
("\);) p n
() N
(    fprintf\(output, ") S
(   y     \\tAnalytic\\tCPU     \\tGPU\\n) str
("\);) p n
() N
(    ) S
(for) K
( \(j = 0; j < ny; j++\) {) p n
(        ic     = j * nx + i;) N
(        REAL y = j * dx; ) S
(// dx = dy) c n
(        fprintf\(output, ") p
(%f\\t%f\\t%f\\t%f\\n) str
(", y, analyticSol[ ic ], cpu[ ic ], gpu[ ic) p n
( ]\);) N
(    }) N
(    fclose\(output\);) N
(}) N
() N
(void) k
( initialize\(REAL *matrix, ) p
(const) K
( INT nx, ) p
(const) K
( INT ny, ) p
(const) K
( REAL dx, ) p
(const) K
( R) p n
(EAL dy\)) N
({) N
(    INT i, j, ic;) N
() N
(    ) S
(for) K
( \(j = 1; j < \(ny - 1\); j++\) {) p n
(        ) S
(for) K
( \(i = 1; i < \(nx - 1\); i++\) {) p n
(            ic           = j * nx + i;) N
(            REAL x       = i * dx;) N
(            REAL y       = j * dy;) N
(            matrix[ ic ] = 0.1 * \(4.0 * x - x * x\) * \(2.0 * y - y * y\);) N
(        }) N
(    }) N
(}) N
() N
(void) k
( phiFirstIteration\() p
(const) K
( REAL *phiCurrent, REAL *phiPrev, ) p
(const) K
( INT nx, ) p
(cons) K n
(t) S
( INT ny, ) p
(const) K
( REAL h, ) p
(const) K
( REAL dt\)) p n
({) N
(    INT  i, j, ic, IP1, IM1, jP1, jM1;) N
(    REAL waveConst = 5.0 * dt * dt / \(2.0 * h * h\);) N
() N
(    ) S
(for) K
( \(j = 1; j < \(ny - 1\); j++\) {) p n
(        ) S
(for) K
( \(i = 1; i < \(nx - 1\); i++\) {) p n
(            ic            = j * nx + i;) N
(            IP1           = j * nx + \(i + 1\);) N
(            IM1           = j * nx + \(i - 1\);) N
(            jP1           = \(j + 1\) * nx + i;) N
(            jM1           = \(j - 1\) * nx + i;) N
(            phiPrev[ ic ] = phiCurrent[ ic ]) N
(                            + waveConst) N
(                              * \(phiCurrent[ IP1 ] + phiCurrent[ IM1 ] + phiCurr) N
(ent[ jM1 ] + phiCurrent[ jP1 ]) N
(                                 - 4.0 * phiCurrent[ ic ]\);) N
(        }) N
(    }) N
(}) N
() N
(void) k
( phiNext\(REAL *phiNew, ) p
(const) K
( REAL *phiCurrent, ) p
(const) K
( REAL *phiPrev, ) p
(const) K
( IN) p n
(T nx, ) S
(const) K
( INT ny, ) p
(const) K
( REAL h,) p n
(             ) S
(const) K
( REAL dt\)) p n
(project1.cu) (Page 2/6) (Oct 27, 20 12:32) title
border
grestore
(Printed by Shawn) rhead
(project1.cu) (1/3) (Tuesday October 27, 2020) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
({) p n
(    INT  i, j, ic, IP1, IM1, jP1, jM1;) N
(    REAL waveConst = 5.0 * dt * dt / \(h * h\);) N
() N
(    ) S
(for) K
( \(j = 1; j < \(ny - 1\); j++\) {) p n
(        ) S
(for) K
( \(i = 1; i < \(nx - 1\); i++\) {) p n
(            ic           = j * nx + i;) N
(            IP1          = j * nx + \(i + 1\);) N
(            IM1          = j * nx + \(i - 1\);) N
(            jP1          = \(j + 1\) * nx + i;) N
(            jM1          = \(j - 1\) * nx + i;) N
(            phiNew[ ic ] = 2.0 * phiCurrent[ ic ] - phiPrev[ ic ]) N
(                           + waveConst) N
(                             * \(phiCurrent[ IP1 ] + phiCurrent[ IM1 ] + phiCurre) N
(nt[ jM1 ] + phiCurrent[ jP1 ]) N
(                                - 4.0 * phiCurrent[ ic ]\);) N
(        }) N
(    }) N
(}) N
() N
(__global__ ) S
(void) k
( phiNextGPU\(REAL *phiNew, ) p
(const) K
( REAL *phiCurrent, ) p
(const) K
( REAL *phi) p n
(Prev, ) S
(const) K
( INT nx, ) p
(const) K
( INT ny,) p n
(                           ) S
(const) K
( REAL h, ) p
(const) K
( REAL dt\)) p n
({) N
(    INT i, j, ic, IP1, IM1, jP1, jM1;) N
(    i = blockIdx.x * blockDim.x + threadIdx.x;) N
(    j = blockIdx.y * blockDim.y + threadIdx.y;) N
() N
(    REAL waveConst = 5.0 * dt * dt / \(h * h\);) N
() N
(    ) S
(if) K
( \(i != 0 && i < \(nx - 1\) && j != 0 && j < \(ny - 1\)\) {) p n
(        ic  = j * nx + i;) N
(        IP1 = j * nx + \(i + 1\);) N
(        IM1 = j * nx + \(i - 1\);) N
(        jP1 = \(j + 1\) * nx + i;) N
(        jM1 = \(j - 1\) * nx + i;) N
(        phiNew[ ic ]) N
(        = 2.0 * phiCurrent[ ic ] - phiPrev[ ic ]) N
(          + waveConst) N
(            * \(phiCurrent[ IP1 ] + phiCurrent[ IM1 ] + phiCurrent[ jM1 ] + phiCu) N
(rrent[ jP1 ] - 4.0 * phiCurrent[ ic ]\);) N
(    }) N
(}) N
() N
(REAL phiInnerLoop\() S
(const) K
( REAL x, ) p
(const) K
( REAL y, ) p
(const) K
( REAL t\)) p n
({) N
(    REAL result   = 0;) N
(    REAL residual = 0;) N
() N
(    REAL prevIter = 1e3;) N
(    ) S
(for) K
( \(INT m = 1; m < LOOP_MAX; m += 2\) {) p n
(        ) S
(for) K
( \(INT n = 1; n < LOOP_MAX; n += 2\) {) p n
(            residual = \(1.0 / \(m * m * m * n * n * n\) * cos\(\(t * sqrt\(5.0\) * PI ) N
(* 0.25\) * sqrt\(m * m + 4.0 * n * n\)\)) N
(                        * sin\(m * PI * x * 0.25\) * sin\(n * PI * y * 0.5\)\);) N
(            result   = result + residual;) N
() N
(            ) S
(if) K
( \(\(fabs\(residual\) / fabs\(result\)\) < MACHINE_PRECISION\) { ) p
(break) K
(; }) p n
(        }) N
(        ) S
(if) K
( \(\(fabs\(result - prevIter\) / fabs\(result\)\) < MACHINE_PRECISION\) { ) p
(brea) K n
(k) S
(; }) p n
(        prevIter = result;) N
(    }) N
() N
(    result = 0.426050 * result;) N
(    ) S
(return) K
( result;) p n
(}) N
() N
(void) k
( analyticalSolFunc\() p
(const) K
( INT nx, ) p
(const) K
( INT ny, ) p
(const) K
( REAL dx, ) p
(const) K
( REAL dy,) p n
(project1.cu) (Page 3/6) (Oct 27, 20 12:32) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( ) p
(const) K
( REAL t, REAL *matrix\)) p n
({) N
(    INT ic;) N
() N
(    ) S
(for) K
( \() p
(int) k
( j = 1; j < \(ny - 1\); j++\) {) p n
(        ) S
(for) K
( \() p
(int) k
( i = 1; i < \(nx - 1\); i++\) {) p n
(            ic           = j * nx + i;) N
(            REAL x       = i * dx;) N
(            REAL y       = j * dy;) N
(            matrix[ ic ] = phiInnerLoop\(x, y, t\);) N
(        }) N
(    }) N
(}) N
() N
(void) k
( findMax\() p
(const) K
( REAL *phi, ) p
(const) K
( INT nx, ) p
(const) K
( INT ny, ) p
(const) K
( INT iter, REAL *) p n
(maxValue, INT *maxValueTime\)) N
({) N
(    INT i, j, ic;) N
() N
(    ) S
(for) K
( \(j = 1; j < \(ny - 1\); j++\) {) p n
(        ) S
(for) K
( \(i = 1; i < \(nx - 1\); i++\) {) p n
(            ic = j * nx + i;) N
(            ) S
(if) K
( \(fabs\(phi[ ic ]\) > *maxValue\) {) p n
(                *maxValue     = fabs\(phi[ ic ]\);) N
(                *maxValueTime = iter;) N
(            }) N
(        }) N
(    }) N
(}) N
() N
(INT main\( \)) N
({) N
(    ) S
(// mesh size must be 513x257, 1026x513, and 2049x1025) c n
(    ) p
(const) K
( ) p
(int) k
(  nx     = 41;) p n
(    ) S
(const) K
( ) p
(int) k
(  ny     = 21;) p n
(    ) S
(const) K
( REAL length = 4.0;) p n
(    ) S
(const) K
( REAL width  = 2.0;) p n
(    ) S
(const) K
( ) p
(int) k
(  size   = ny * nx;) p n
(    ) S
(const) K
( REAL dx     = length / \(nx - 1\);) p n
(    ) S
(const) K
( REAL dy     = width / \(ny - 1\);) p n
(    ) S
(const) K
( REAL h      = dx;) p n
(    REAL *     temp;) N
() N
(    ) S
(// multiple by 0.1 to make sure dt is small enough) c n
(    ) p
(const) K
( REAL dt          = 1.0 * h / sqrt\(5.0\) * 0.1;) p n
(    ) S
(const) K
( ) p
(int) k
(  numOfLoops  = \( ) p
(int) k
( \) ceil\(TIME / dt\);) p n
(    INT        part3ConstX = \( ) S
(int) k
( \) ceil\(LX * length / dx\);) p n
() N
(    ) S
(// ########################### Alloc Memory ###########################) c n
() p n
(    ) S
(// Alloc memory for arrays) c n
(    REAL *phiCurrent_GPU, *phiPrev_GPU, *phiNew_GPU;) p n
(    cudaMallocManaged\(&phiCurrent_GPU, size * ) S
(sizeof) K
(\(*phiCurrent_GPU\)\);) p n
(    cudaMallocManaged\(&phiPrev_GPU, size * ) S
(sizeof) K
(\(*phiPrev_GPU\)\);) p n
(    cudaMallocManaged\(&phiNew_GPU, size * ) S
(sizeof) K
(\(*phiNew_GPU\)\);) p n
() N
(    ) S
(// Memory Allocation for CPU only functions) c n
(    REAL *analyticSol    = \( REAL * \) calloc\(nx * ny, ) p
(sizeof) K
(\(*analyticSol\)\);) p n
(    REAL *phinew_CPU     = \( REAL * \) calloc\(nx * ny, ) S
(sizeof) K
(\(*phinew_CPU\)\);) p n
(    REAL *phiCurrent_CPU = \( REAL * \) calloc\(nx * ny, ) S
(sizeof) K
(\(*phiCurrent_CPU\)\);) p n
(    REAL *phiPrev_CPU    = \( REAL * \) calloc\(nx * ny, ) S
(sizeof) K
(\(*phiPrev_CPU\)\);) p n
() N
(    ) S
(// ########################### Analytical Solution ########################) c n
(    ) p
(// Solve the Analytic Solution) c n
(    analyticalSolFunc\(nx, ny, dx, dy, TIME, analyticSol\);) p n
() N
(    ) S
(// ########################### Create mesh and init #######################) c n
() p n
(    ) S
(// GPU Initialize to beginning value and calculate prev iter) c n
(project1.cu) (Page 4/6) (Oct 27, 20 12:32) title
border
grestore
(Printed by Shawn) rhead
(project1.cu) (2/3) (Tuesday October 27, 2020) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    initialize\(phiCurrent_GPU, nx, ny, dx, dy\);) p n
(    phiFirstIteration\(phiCurrent_GPU, phiPrev_GPU, nx, ny, h, dt\);) N
() N
(    ) S
(// CPU Initialize to beginning value and calculate prev iter) c n
(    initialize\(phiCurrent_CPU, nx, ny, dx, dy\);) p n
(    phiFirstIteration\(phiCurrent_CPU, phiPrev_CPU, nx, ny, h, dt\);) N
() N
(    ) S
(// ########################### GPU Run ###########################) c n
(    ) p
(// Setup CUDA and solve the finite difference) c n
(    dim3 threadsPerBlock\(BLOCK_SIZE_X, BLOCK_SIZE_Y\);) p n
(    dim3 numBlocks\(\(nx - 1\) / threadsPerBlock.x + 1, \(ny - 1\) / threadsPerBlock.) N
(y + 1\);) N
() N
(    ) S
(// Start timing) c n
(    cudaEvent_t timeStart, timeStop;) p n
(    cudaEventCreate\(&timeStart\);) N
(    cudaEventCreate\(&timeStop\);) N
(    ) S
(float) k
( gpu_elapsedTime;         ) p
(// type float, precision is milliseconds!!) c n
(    cudaEventRecord\(timeStart, 0\); ) p
(// 2nd argument zero, cuda streams) c n
() p n
(    ) S
(// Loop to go forward in time) c n
(    ) p
(for) K
( \() p
(int) k
( i = 0; i < numOfLoops; i++\) {) p n
(        phiNextGPU< < < numBlocks, threadsPerBlock > > >\(phiNew_GPU, phiCurrent_) N
(GPU, phiPrev_GPU, nx, ny, h, dt\);) N
(        cudaDeviceSynchronize\( \);) N
(        temp           = phiPrev_GPU;) N
(        phiPrev_GPU    = phiCurrent_GPU;) N
(        phiCurrent_GPU = phiNew_GPU;) N
(        phiNew_GPU     = temp;) N
(    }) N
(    ) S
(// stop time) c n
(    cudaEventRecord\(timeStop, 0\);) p n
(    cudaEventSynchronize\(timeStop\);) N
(    cudaEventElapsedTime\(&gpu_elapsedTime, timeStart, timeStop\);) N
() N
(    ) S
(// ########################### CPU Run ###########################) c n
(    ) p
(// Used to find max) c n
(    ) p
(// REAL maxValue = 0;) c n
(    ) p
(// INT maxValueTime = 0;) c n
() p n
(    StartTimer\( \);) N
() N
(    ) S
(int) k
( i;) p n
(    ) S
(for) K
( \(i = 0; i < numOfLoops; i++\) {) p n
(        phiNext\(phinew_CPU, phiCurrent_CPU, phiPrev_CPU, nx, ny, h, dt\);) N
(        temp           = phiPrev_CPU;) N
(        phiPrev_CPU    = phiCurrent_CPU;) N
(        phiCurrent_CPU = phinew_CPU;) N
(        phinew_CPU     = temp;) N
() S 8 T () S
(// max function for part 4) c n
(        ) p
(// findMax\(phiCurrent_CPU,nx, ny,i, & maxValue, & maxValueTime\); ) c n
(    }) p n
() N
(    ) S
(double) k
( cpu_elapsedTime = GetTimer\( \); ) p
(// elapsed time is in seconds) c n
(    printf\(") p
(elapsed wall time \(CPU\) = %5.4f ms\\n) str
(", cpu_elapsedTime * 1000.\);) p n
(    printf\(") S
(elapsed wall time \(GPU\) = %5.4f ms\\n\\n) str
(", gpu_elapsedTime\);) p n
(    cudaEventDestroy\(timeStart\);) N
(    cudaEventDestroy\(timeStop\);) N
() N
(    ) S
(// max magnitude for part 4) c n
(    ) p
(// printf\("max = %f\\n",maxValue\);) c n
(    ) p
(// printf\("time at max = %f\\n",maxValueTime*dt\);) c n
() p n
(    ) S
(// ########################### Write to output ###########################) c n
(    ) p
(// Write output to file) c n
(    ) p
(// constant value of x) c n
(    compareOutput\(nx, ny, analyticSol, phiCurrent_CPU, phiCurrent_GPU, dx, part3) p n
(ConstX\);) N
(    ) S
(// entire matrix to plot a surface) c n
(project1.cu) (Page 5/6) (Oct 27, 20 12:32) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    surfaceOutput\(nx, ny, phiCurrent_CPU\);) p n
() N
(    ) S
(// Free variables) c n
(    free\(analyticSol\);) p n
(    free\(phinew_CPU\);) N
(    free\(phiCurrent_CPU\);) N
(    free\(phiPrev_CPU\);) N
(    cudaFree\(phiCurrent_GPU\);) N
(    cudaFree\(phiPrev_GPU\);) N
(    cudaFree\(phiNew_GPU\);) N
() N
(    ) S
(return) K
( EXIT_SUCCESS;) p n
(}) N
() N
(project1.cu) (Page 6/6) (Oct 27, 20 12:32) title
border
grestore
(Printed by Shawn) rhead
(project1.cu) (3/3) (Tuesday October 27, 2020) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
